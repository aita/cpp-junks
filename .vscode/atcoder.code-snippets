{
	// Place your cpp-junks workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AtCoder C++ Template": {
		"prefix": "atcoder",
		"description": "AtCoder C++ template",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <numeric>",
			"",
			"using namespace std;",
			"",
			"using ll = long long;",
			"constexpr auto INF = numeric_limits<ll>::max();",
			"",
			"#define RANGE(i, a, b)                                                           \\",
			"  for (ll i = static_cast<ll>(a); i < static_cast<ll>(b); ++i)",
			"#define REP(i, n) RANGE(i, 0, n)",
			"",
			"constexpr auto nl = \"\\n\";",
			"",
			"int main() {",
			"  ios::sync_with_stdio(false);",
			"  cin.tie(0);",
			"",
			"  $0",
			"",
			"  return 0;",
			"}",
			""
		]
	},
	"REP Macro": {
		"prefix": "rep",
		"body": [
			"REP(${1:i}, ${2:N}) {",
			"  $0",
			"}"
		]
	},
	"RANGE Macro": {
		"prefix": "range",
		"body": [
			"RANGE(${1:i}, ${2:0}, ${3:N}) {",
			"  $0",
			"}"
		]
	},
	"vector<ll>": {
		"prefix": "vll",
		"body": [
			"vector<ll>$0"
		]
	}
}